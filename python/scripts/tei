#!/usr/bin/env python
import argparse
import sys

import tak
from tak import mcts, ptn

from xformer import loading
from tak.model import wrapper, grpc


class Action:
    pass


class Quit(Action):
    pass


class Server:
    config: mcts.Config
    engine: mcts.MCTS
    pos: tak.Position
    size: int
    argmax: bool = False

    def __init__(
        self,
        config: mcts.Config,
        network: mcts.PolicyAndAction,
        argmax: bool = False,
    ):
        self.config = config
        self.network = network
        self.argmax = argmax

    def parse_position(self, words):
        pos = None
        cmd = words[0]
        if cmd == "startpos":
            words = words[1:]
            pos = tak.Position(tak.Config(size=self.size))
        elif cmd == "tps":
            if len(words) < 4:
                raise ValueError("position tps: not enough words")
            pos = ptn.parse_tps(" ".join(words[1:4]))
            words = words[4:]
        else:
            raise ValueError(f"Unknown initial position: {cmd}")
        if len(words) == 0:
            return pos
        if words[0] != "moves":
            raise ValueError(f"expected 'moves', got {words[0]}")
        for w in words[1:]:
            move = ptn.parse_move(w)
            pos = pos.move(move)
        return pos

    def analyze(self, words):
        # todo: parse time controls I guess
        tree = self.engine.analyze(self.pos)
        if not self.argmax:
            move = self.engine.select_root_move(tree)
        else:
            probs = tree.policy_probs(self.engine.config.C)
            argmax = probs.argmax().item()
            move = tree.children[argmax].move
        yield f"bestmove {ptn.format_move(move)}"

    def receive(self, line: str):
        line = line.strip()
        cmd, *words = line.split(" ")
        if cmd == "tei":
            yield "id name Strategician"
            yield "id author Nelson Elhage"
            yield "teiok"
        elif cmd == "quit":
            yield Quit()
        elif cmd == "teinewgame":
            size = int(words[0])
            self.size = size
            self.engine = mcts.MCTS(self.config, self.network)
        elif cmd == "position":
            self.pos = self.parse_position(words)
        elif cmd == "go":
            yield from self.analyze(words)
        elif cmd == "stop":
            pass
        elif cmd == "isready":
            yield "readyok"
        else:
            raise ValueError(f"Unknown command: {cmd}")


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--time-limit",
        "-t",
        dest="time_limit",
        type=float,
        help="MCTS time limit in seconds",
        metavar="SECONDS",
    )
    parser.add_argument(
        "--simulation-limit",
        "-l",
        dest="simulation_limit",
        type=int,
        metavar="POSITIONS",
    )
    parser.add_argument(
        "--model",
        type=str,
        metavar="MODEL",
    )
    parser.add_argument(
        "--device",
        type=str,
        default="cpu",
    )
    parser.add_argument(
        "--host",
        type=str,
    )
    parser.add_argument(
        "--port",
        type=int,
        default=5001,
    )
    parser.add_argument(
        "--argmax",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        "--debug",
        "-d",
        dest="debug",
        action="store_true",
    )
    parser.add_argument("-c", "--mcts.c", dest="C", type=float)

    return parser.parse_args()


def main():
    args = parse_args()

    if (args.model and args.host) or not (args.model or args.host):
        raise ValueError("Must specify either --host or --model, not both")
    if args.model:
        model = loading.load_model(args.model, args.device)

        if args.device == "cuda":
            network = wrapper.GraphedWrapper(model)
        else:
            network = wrapper.ModelWrapper(model, device=args.device)
    else:
        network = grpc.GRPCNetwork(host=args.host, port=args.port)

    config = mcts.Config()

    if args.C is not None:
        config.C = args.C
    if args.time_limit is not None:
        config.time_limit = args.time_limit
    if args.simulation_limit is not None:
        config.simulation_limit = args.simulation_limit

    srv = Server(config, network, argmax=args.argmax)
    while True:
        line = sys.stdin.readline()
        if len(line) == 0:
            raise EOFError
        if args.debug:
            print(f"[TEI] recv: {line!r}", file=sys.stderr)
        for cmd in srv.receive(line):
            if isinstance(cmd, str):
                if args.debug:
                    print(f"[TEI] send: {cmd!r}", file=sys.stderr)
                sys.stdout.write(cmd + "\n")
                sys.stdout.flush()
            elif isinstance(cmd, Quit):
                return
            else:
                raise ValueError(f"Internal error: got {cmd!r}")


if __name__ == "__main__":
    main()
